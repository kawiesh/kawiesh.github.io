
❌❌❌❌C S S❌❌❌❌

#tree{
width: 100%;
position: relative;
display: flex;
flex-direction: column;
justify-content: flex-start;
align-items: center;
}

.root{
width: 95%;
}

.root *{
text-transform: lowercase;
font: small-caps 14px Arial;
position: relative;
}


ul{
list-style-image:
url('https://api.iconify.design/ant-design/file-twotone.svg?color=gray');
}


details>summary{
list-style: none;
position: relative;
}

details[open]>summary{
color: red;
}


summary{
list-style: none;
margin-left: 10px;
}

details>summary::before{
content:
url('https://api.iconify.design/ant-design/folder-filled.svg?color=gold');
position: absolute;
left: -15px;
}


details[open]>summary::before{
content:
url('https://api.iconify.design/ant-design/folder-open-filled.svg?color=gold');
position: absolute;
left: -15px;
}



.root details[open]::before{
content:"\00a0\00a0\00a0";
position: absolute;
border-left: 1px dotted;
top:9px;
left:3px;
}




.root details ul{
margin-left: 15px;
}



li::before{
content: "\00a0\00a0\00a0";
border-top: 1px dotted black;
border-left: 1px dotted black;
height: 100%;
position: absolute;
left:-12px;
top: 0.6em;
z-index: -10;
}


li:last-child::before{
border-bottom: none;
border-left: none;
}

a{
bottom: 0px;
margin-left: 10px;
text-decoration: none;
}


.root>summary{
font-size: 20px;
}


li{
list-style:none;
}

a::before{
content: url('https://api.iconify.design/ant-design/file-filled.svg?color=rgb(100,150,150)');
position: absolute;
z-index: 9;
left:-13px;
transform: scale(0.8,0.8);
}


❌❌❌❌H T M L❌❌❌❌
<div id="tree"></div>



❌❌❌❌J A V A S C R I P T❌❌❌❌			

let create= (x)=> document.createElement(x),
select= (x,y=document)=> y.querySelector(x),
selectAll= (x,y=document)=> y.querySelectorAll(x);

let tree= select("#tree");
let list = {};

let full= {
"root":[]
};

makeTree(full);


function makeTree(obj){
list = {};

function createDetails(name,arr){
let det= create("details");
let sum= create("summary");
sum.innerHTML= name;
let ul= create("ul");
arr.forEach(i=>{
let li= create("li");
li.innerHTML= i;
ul.append(li);		
});
det.append(sum,ul);

list[name]= det;
};




for(let i in obj){
if (obj.hasOwnProperty(i)){
obj[i]= obj[i].map(j=>{
let text= j.split("/");
text= text[text.length-1];
return `<a href="/${j}">${text}</a>`;
});
}
}





//Create root folder and remove it from object
createDetails("root", obj["root"]);
let root= list["root"];
root.className= "root";
root.open= true;
tree.innerHTML= "";
tree.append(root);
delete obj["root"];



//Handle other folders
for(let i in obj){
if (obj.hasOwnProperty(i)){

if(i.includes(">")){
let klassname= i.split(">");
createDetails(i,obj[i]);
list[i].className= klassname.join(" ");
select("summary",list[i]).innerHTML= klassname.pop();
//list[i].style.marginLeft= "15px";
}
else{
createDetails(i,obj[i]);
list[i].className= i;
let li= create("li");
li.append(list[i]);
select("ul",root).append(li);
}


}}


for(let i in obj){
if (obj.hasOwnProperty(i)){
if(i.includes(">")){
let hmm= i.split(">");

for(let h=1; h<hmm.length; h++){
let par= hmm.slice(0,h).join(">");
let ch= hmm.slice(0,h+1).join(">");

let li= create("li");
li.append(list[ch]);
select("ul",list[par]).append(li);
}

}
}}


}


